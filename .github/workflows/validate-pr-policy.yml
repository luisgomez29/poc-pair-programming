name: Validate Pull Request Policy

on:
  pull_request:
    types: [opened, edited, synchronize, ready_for_review]

jobs:
  validate-policy:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Validate PR requirements
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.PULL_REQUEST_TOKEN }}
          script: |
            const pr = context.payload.pull_request;

            // Ensure PR body exists
            if (!pr.body) {
              core.setFailed("‚ùå The pull request body is empty.");
              return;
            }

            // Extract all referenced issue numbers from PR body
            const issueMatches = pr.body.matchAll(/(Closes|Fixes) #?(\d+)/gi);
            const issueNumbers = Array.from(issueMatches, m => m[2]);
            if (!issueNumbers.length) {
              core.setFailed("‚ùå The pull request does not reference any issue.");
              return;
            }

            let foundOpenPP = false;
            let selectedIssue = null;
            let issueAssignees = [];
            for (const issueNumber of issueNumbers) {
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              const isOpen = issue.data.state === 'open';
              const hasPPLabel = issue.data.labels.some(label => label.name === 'PP');
              if (isOpen && hasPPLabel) {
                foundOpenPP = true;
                selectedIssue = issue;
                issueAssignees = issue.data.assignees.map(a => a.login);
                console.log(`‚ÑπÔ∏è Issue #${issueNumber} is open and has 'PP' label.`);
                break;
              } else {
                console.log(`‚ÑπÔ∏è Issue #${issueNumber} is${isOpen ? '' : ' not'} open and${hasPPLabel ? '' : ' does not'} have 'PP' label.`);
              }
            }

            //if (!hasPPLabel) return;

            if (!foundOpenPP) {
              core.setFailed("‚ùå None of the referenced issues are open and have the 'PP' label.");
              return;
            }

            console.log(`‚ÑπÔ∏è Issue has ${issueAssignees.length} assignee(s).`);
            issueAssignees.forEach(a => console.log(`üë§ Assignee: ${a}`));

            // Validate at least two assignees
            if (issueAssignees.length < 2) {
              core.setFailed("‚ùå The issue with 'PP' label must have at least two assignees.");
              return;
            }

            // Identify the pair programmer (not the PR author)
            const pairReviewers = issueAssignees.filter(a => a !== pr.user.login);
            if (pairReviewers.length === 0) {
              core.setFailed("‚ùå Could not identify the pair reviewer.");
              return;
            }

            console.log(`Assigning reviewers from issue #${selectedIssue.number}:`, pairReviewers);
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              reviewers: pairReviewers
            });

            console.log(`‚úÖ The pair reviewers (${pairReviewers}) have to approve the PR.`);
