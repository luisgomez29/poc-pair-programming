name: Validate Pull Request Policy

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  validate-policy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Validate PR requirements
        uses: actions/github-script@v8
        github-token: ${{ secrets.PULL_REQUEST_TOKEN }}
        with:
          script: |
            const pr = context.payload.pull_request;

            // Ensure PR body exists
            if (!pr.body) {
              core.setFailed("❌ The pull request body is empty.");
              return;
            }

            // Extract issue number from PR body
            const issueMatch = pr.body.match(/(Closes|Fixes) #?(\d+)/i);
            if (!issueMatch) {
              core.setFailed("❌ The pull request does not reference any issue.");
              return;
            }

            const issueNumber = issueMatch[2];

            // Get issue details
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });

            const hasPPLabel = issue.data.labels.some(label => label.name === 'PP');
            const issueAssignees = issue.data.assignees.map(a => a.login);
            console.log(`ℹ️ Issue #${issueNumber} has ${issueAssignees.length} assignee(s).`);
            issueAssignees.forEach(a => console.log(`👤 Assignee: ${a}`));

            if (!hasPPLabel) return;

            // Validate at least two assignees
            if (issueAssignees.length < 2) {
              core.setFailed("❌ The issue with 'PP' label must have at least two assignees.");
              return;
            }

            // Identify the pair programmer (not the PR author)
            const pairReviewer = issueAssignees.find(a => a !== pr.user.login);
            if (!pairReviewer) {
              core.setFailed("❌ Could not identify the pair reviewer.");
              return;
            }

            console.log(`Assigning reviewers from issue #${issueNumber}:`, pairReviewer);
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              reviewers: [pairReviewer]
            });

            console.log(`🔍 Pair reviewer should be: ${pairReviewer}`);

            // Get PR reviews
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            const approvedByPair = reviews.data.some(review =>
              review.state === 'APPROVED' &&
              review.user.login === pairReviewer
            );

            if (!approvedByPair) {
              core.setFailed(`❌ The pair reviewer (${pairReviewer}) must approve the PR.`);
              return;
            }

            console.log(`✅ The pair reviewer (${pairReviewer}) has approved the PR.`);