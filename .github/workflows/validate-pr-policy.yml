name: Validate Pull Request Policy

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  validate-policy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Validate PR requirements
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.PULL_REQUEST_TOKEN }}
          script: |
            const pr = context.payload.pull_request;

            // Ensure PR body exists
            if (!pr.body) {
              core.setFailed("‚ùå The pull request body is empty.");
              return;
            }

            // Extract issue number from PR body
            const issueMatch = pr.body.match(/(Closes|Fixes) #?(\d+)/i);
            if (!issueMatch) {
              core.setFailed("‚ùå The pull request does not reference any issue.");
              return;
            }

            const issueNumber = issueMatch[2];

            // Get issue details
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber
            });

            const hasPPLabel = issue.data.labels.some(label => label.name === 'PP');
            const issueAssignees = issue.data.assignees.map(a => a.login);
            console.log(`‚ÑπÔ∏è Issue #${issueNumber} has ${issueAssignees.length} assignee(s).`);
            issueAssignees.forEach(a => console.log(`üë§ Assignee: ${a}`));

            if (!hasPPLabel) return;

            // Validate at least two assignees
            if (issueAssignees.length < 2) {
              core.setFailed("‚ùå The issue with 'PP' label must have at least two assignees.");
              return;
            }

            // Identify the pair programmer (not the PR author)
            const pairReviewers = issueAssignees.filter(a => a !== pr.user.login);
            if (pairReviewers.length === 0) {
              core.setFailed("‚ùå Could not identify the pair reviewer.");
              return;
            }

            console.log(`Assigning reviewers from issue #${issueNumber}:`, pairReviewers);
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              reviewers: pairReviewers
            });

            console.log(`‚úÖ The pair reviewers (${pairReviewers}) have approved the PR.`);

  validate-approver-before-merge:
      runs-on: ubuntu-latest
      needs: validate-policy
      steps:
        - name: Checkout repository
          uses: actions/checkout@v5

        - name: Validate PR approver is issue assignee and not PR author
          uses: actions/github-script@v8
          with:
            github-token: ${{ secrets.PULL_REQUEST_TOKEN }}
            script: |
              const pr = context.payload.pull_request;
              if (!pr) {
                core.setFailed('No pull request found in context');
                return;
              }

              const prAuthor = pr.user.login;
              const prNumber = pr.number;
              // Get linked issue (assume PR body contains "Closes #<issue_number>")
              const issueMatch = pr.body && pr.body.match(/Closes #([0-9]+)/i);
              if (!issueMatch) {
                core.setFailed('No linked issue found in PR body');
                return;
              }
              
              const issueNumber = issueMatch[1];
              // Get issue assignees
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
              });

              const issueAssignees = issue.data.assignees.map(a => a.login);
              console.log(`‚ÑπÔ∏è Issue #${issueNumber} has ${issueAssignees.length} assignee(s).`);
              // Get PR reviews
              const reviews = await github.rest.pulls.listReviews({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              });

              const approvedReviewers = reviews.data.filter(r => r.state === 'APPROVED').map(r => r.user.login);
              // Check if any approved reviewer is an issue assignee and not the PR author
              const validApprover = approvedReviewers.find(r => issueAssignees.includes(r) && r !== prAuthor);
              if (!validApprover) {
                core.setFailed('No valid approver found: must be assignee of the issue and different from PR author');
                return;
              }
              console.log('‚úÖ Validation passed: valid approver found:', validApprover);