name: Validate Pull Request Before Merge Policy

on:
  pull_request_review:
    types: [submitted]

jobs:
  validate-approver-before-merge:
    runs-on: ubuntu-latest
    if: github.event.review.state == 'approved'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Validate PR approver is issue assignee and not PR author
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.PULL_REQUEST_TOKEN }}
          script: |
            const pr = context.payload.pull_request;

            // Extract all issue numbers preceded by # in PR body
            const issueNumbers = Array.from(pr.body.matchAll(/#(\d+)/g), m => m[1]);

            if (!issueNumbers.length) {
              core.setFailed("‚ùå The pull request does not reference any issue.");
              return;
            }

            let foundOpenPP = false;
            let selectedIssue = null;
            let issueAssignees = [];
            for (const issueNumber of issueNumbers) {
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              const isOpen = issue.data.state === 'open';
              const hasPPLabel = issue.data.labels.some(label => label.name === 'PP');
              if (isOpen && hasPPLabel) {
                foundOpenPP = true;
                selectedIssue = issue;
                issueAssignees = issue.data.assignees.map(a => a.login);
                console.log(`‚ÑπÔ∏è Issue #${issueNumber} is open and has 'PP' label.`);
                break;
              }
            }

            if (!foundOpenPP) {
              core.setFailed("‚ùå No referenced issue is open and has the 'PP' label.");
              return;
            }

            console.log(`‚ÑπÔ∏è Issue #${selectedIssue.data.number} has ${issueAssignees.length} assignee(s).`);
            issueAssignees.forEach(a => console.log(`üë§ Assignee: ${a}`));

            // Get reviews on the PR
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            // Filter approved reviews
            const approvedReviews = reviews.data.filter(r => r.state === 'APPROVED');
            if (approvedReviews.length === 0) {
              core.setFailed("‚ùå The pull request has not been approved.");
              return;
            }

            // Check if at least one approved reviewer is an assignee of the issue and not the PR author
            const validApprover = approvedReviews.find(r =>
              issueAssignees.includes(r.user.login) && r.user.login !== pr.user.login
            );

            if (!validApprover) {
              core.setFailed("‚ùå No valid reviewer found: must be an assignee of the issue and not the PR author.");
              return;
            }

            console.log(`‚úÖ Valid reviewer found: ${validApprover.user.login}`);
